/*
 * Carwash service
 * Carwash service. Make appointments on free time slots or the next free time
 *
 * OpenAPI spec version: 1.0.0
 * Contact: kontarook@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package CarWashSwaggerApi.api.model;

import java.util.Objects;
import java.util.Arrays;
import CarWashSwaggerApi.api.model.Assistance;
import CarWashSwaggerApi.api.model.User;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
/**
 * Appointment
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-02-22T00:45:30.896522+03:00[Europe/Moscow]")
public class Appointment {
  @JsonProperty("assistances")
  private List<Assistance> assistances = null;

  @JsonProperty("created")
  private LocalDateTime created = null;

  @JsonProperty("endTime")
  private LocalDateTime endTime = null;

  @JsonProperty("startTime")
  private LocalDateTime startTime = null;

  @JsonProperty("totalPrice")
  private Double totalPrice = null;

  @JsonProperty("updateted")
  private LocalDateTime updateted = null;

  @JsonProperty("user")
  private User user = null;

  public Appointment assistances(List<Assistance> assistances) {
    this.assistances = assistances;
    return this;
  }

  public Appointment addAssistancesItem(Assistance assistancesItem) {
    if (this.assistances == null) {
      this.assistances = new ArrayList<>();
    }
    this.assistances.add(assistancesItem);
    return this;
  }

   /**
   * Get assistances
   * @return assistances
  **/
  @Schema(description = "")
  public List<Assistance> getAssistances() {
    return assistances;
  }

  public void setAssistances(List<Assistance> assistances) {
    this.assistances = assistances;
  }

  public Appointment created(LocalDateTime created) {
    this.created = created;
    return this;
  }

   /**
   * Get created
   * @return created
  **/
  @Schema(description = "")
  public LocalDateTime getCreated() {
    return created;
  }

  public void setCreated(LocalDateTime created) {
    this.created = created;
  }

  public Appointment endTime(LocalDateTime endTime) {
    this.endTime = endTime;
    return this;
  }

   /**
   * Get endTime
   * @return endTime
  **/
  @Schema(description = "")
  public LocalDateTime getEndTime() {
    return endTime;
  }

  public void setEndTime(LocalDateTime endTime) {
    this.endTime = endTime;
  }

  public Appointment startTime(LocalDateTime startTime) {
    this.startTime = startTime;
    return this;
  }

   /**
   * Get startTime
   * @return startTime
  **/
  @Schema(description = "")
  public LocalDateTime getStartTime() {
    return startTime;
  }

  public void setStartTime(LocalDateTime startTime) {
    this.startTime = startTime;
  }

  public Appointment totalPrice(Double totalPrice) {
    this.totalPrice = totalPrice;
    return this;
  }

   /**
   * Get totalPrice
   * @return totalPrice
  **/
  @Schema(description = "")
  public Double getTotalPrice() {
    return totalPrice;
  }

  public void setTotalPrice(Double totalPrice) {
    this.totalPrice = totalPrice;
  }

  public Appointment updateted(LocalDateTime updateted) {
    this.updateted = updateted;
    return this;
  }

   /**
   * Get updateted
   * @return updateted
  **/
  @Schema(description = "")
  public LocalDateTime getUpdateted() {
    return updateted;
  }

  public void setUpdateted(LocalDateTime updateted) {
    this.updateted = updateted;
  }

  public Appointment user(User user) {
    this.user = user;
    return this;
  }

   /**
   * Get user
   * @return user
  **/
  @Schema(description = "")
  public User getUser() {
    return user;
  }

  public void setUser(User user) {
    this.user = user;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Appointment appointment = (Appointment) o;
    return Objects.equals(this.assistances, appointment.assistances) &&
        Objects.equals(this.created, appointment.created) &&
        Objects.equals(this.endTime, appointment.endTime) &&
        Objects.equals(this.startTime, appointment.startTime) &&
        Objects.equals(this.totalPrice, appointment.totalPrice) &&
        Objects.equals(this.updateted, appointment.updateted) &&
        Objects.equals(this.user, appointment.user);
  }

  @Override
  public int hashCode() {
    return Objects.hash(assistances, created, endTime, startTime, totalPrice, updateted, user);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Appointment {\n");
    
    sb.append("    assistances: ").append(toIndentedString(assistances)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    totalPrice: ").append(toIndentedString(totalPrice)).append("\n");
    sb.append("    updateted: ").append(toIndentedString(updateted)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
